"use strict";(self.webpackChunk_generate_license_file_website=self.webpackChunk_generate_license_file_website||[]).push([[986],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=l,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9482:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(3786),l=n(7294);const a=e=>{const t=(e?.aliases?.length??0)>0,n=1===e.aliases?.length?"Alias":"Aliases",r=(e.aliases??[]).map(((e,t)=>l.createElement(l.Fragment,null,0!==t&&l.createElement(l.Fragment,null,", "),l.createElement("code",null,e))));return l.createElement(i,null,l.createElement(o,null,l.createElement(s,null,l.createElement("b",null,"Type:")," ",l.createElement("code",null,e.type)),l.createElement(s,null,l.createElement("b",null,"Is required:")," ",l.createElement("code",null,e.isRequired?"true":"false")),t&&l.createElement(s,null,l.createElement("b",null,n,":")," ",r)))},i=r.Z.table`
  border: 0;
`,o=r.Z.tr`
  border: 0;
`,s=r.Z.td`
  border: 0;
`},5556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),l=(n(7294),n(3905)),a=n(9482);const i={title:"CLI",description:"Overview and example usages of the generate license file CLI"},o=void 0,s={unversionedId:"cli/index",id:"version-2.0.0/cli/index",title:"CLI",description:"Overview and example usages of the generate license file CLI",source:"@site/versioned_docs/version-2.0.0/cli/index.mdx",sourceDirName:"cli",slug:"/cli/",permalink:"/docs/cli/",draft:!1,editUrl:"https://github.com/TobyAndToby/generate-license-file/tree/main/projects/website/versioned_docs/version-2.0.0/cli/index.mdx",tags:[],version:"2.0.0",frontMatter:{title:"CLI",description:"Overview and example usages of the generate license file CLI"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/intro/getting-started"},next:{title:"Library",permalink:"/docs/library/"}},p={},c=[{value:"--input",id:"--input",level:2},{value:"--output",id:"--output",level:2},{value:"--overwrite",id:"--overwrite",level:2},{value:"--eol",id:"--eol",level:2},{value:"--ci",id:"--ci",level:2},{value:"--no-spinner",id:"--no-spinner",level:2},{value:"--version",id:"--version",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"generate-license-file")," CLI will resolve all of the licenses of your third-party dependencies and write them to a file on the disk."),(0,l.kt)("h2",{id:"--input"},"--input"),(0,l.kt)(a.Z,{type:"string",isRequired:!0,aliases:["-i"],mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"The input parameter is required and needs be a path to the ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json")," of the project. It can be a relative or absolute path."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --input ./myProject/package.json\n\nnpx generate-license-file --input C:/myProject/package.json\n")),(0,l.kt)("p",null,"If the path contains a space, then wrap it in double-quotes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'npx generate-license-file --input "./my project/package.json"\n')),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"-i")," alias."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file -i ./myProject/package.json\n")),(0,l.kt)("h2",{id:"--output"},"--output"),(0,l.kt)(a.Z,{type:"string",isRequired:!0,aliases:["-o"],mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"The output parameter is required and needs be a path to desired output file. It can be a relative or absolute path."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --output ./third-party-licenses.txt\n\nnpx generate-license-file --output C:/third-party-licenses.txt\n")),(0,l.kt)("p",null,"If the path contains a space, then wrap it in double-quotes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'npx generate-license-file --output "./my project/third-party-licenses.txt"\n')),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"-o")," alias."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file -o ./myProject/third-party-licenses.txt\n")),(0,l.kt)("h2",{id:"--overwrite"},"--overwrite"),(0,l.kt)(a.Z,{type:"boolean",mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"If a file already exists at the provided output path, then the CLI won't overwrite it by default."),(0,l.kt)("p",null,"If you'd like the CLI to overwrite existing files then provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"--overwrite")," flag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --overwrite\n")),(0,l.kt)("h2",{id:"--eol"},"--eol"),(0,l.kt)(a.Z,{type:"string",mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"By default the CLI writes files to disk using the default line endings of the current machine."),(0,l.kt)("p",null,"If you want the output file to use a specific line ending then you can provide either ",(0,l.kt)("inlineCode",{parentName:"p"},"lf")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"crlf")," with the ",(0,l.kt)("inlineCode",{parentName:"p"},"--eol")," flag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --eol lf\n\nnpx generate-license-file --eol crlf\n")),(0,l.kt)("h2",{id:"--ci"},"--ci"),(0,l.kt)(a.Z,{type:"boolean",mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"When using the the CLI locally, it will prompt you for inputs if you forget to supply one that's required."),(0,l.kt)("p",null,"To stop the CLI from trying to show the prompts in a CI/CD environment (and instead error/fail-fast), you can provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"--ci")," flag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --ci\n")),(0,l.kt)("h2",{id:"--no-spinner"},"--no-spinner"),(0,l.kt)(a.Z,{type:"boolean",mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"The CLI shows a spinner in the terminal while it's doing it's work."),(0,l.kt)("p",null,"If the spinner doesn't play nicely with your local or CI/CD environments then you can pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"--no-spinner")," flag to make it only log standard text messages."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --no-spinner\n")),(0,l.kt)("h2",{id:"--version"},"--version"),(0,l.kt)(a.Z,{type:"boolean",aliases:["-v"],mdxType:"ArgumentInfo"}),(0,l.kt)("p",null,"Pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"--version")," flag to the CLI to make it log out which version you have installed."),(0,l.kt)("p",null,"When this flag is given, the CLI will not do anything else, and no files will be generated."),(0,l.kt)("p",null,"You can also pass in the alias ",(0,l.kt)("inlineCode",{parentName:"p"},"-v"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx generate-license-file --version\n\nnpx generate-license-file -v\n")))}d.isMDXComponent=!0}}]);